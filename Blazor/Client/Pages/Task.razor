@page "/task"
@using Blazor.Client.Service
@inject ApiServices ApiServices
@inject IJSRuntime JsRuntime
@inject NavigationManager NavigationManager
@inject HttpClient Http
@inject LocalStorageService LocalStorageService

<style>
    * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
        list-style: none;
        text-decoration: none;
    }

    ul {
        margin-bottom: 0;
        padding: 0 !important;
    }

    a {
        color: #000;
        text-decoration: none;
        cursor: pointer;
    }

    header {
        background-color: #fff;
    }

    .container-s {
        max-width: 1200px;
        margin: 0 auto;
    }

    .header__container {
        padding: 14px 0;
        display: flex;
        align-items: center;
    }

        .header__container img {
            margin: 0 auto;
        }

    .header__list {
        display: flex;
        gap: 30px;
    }

    .header__auth {
        display: flex;
        gap: 20px;
        align-items: center;
        margin-left: auto;
    }

        .header__auth a {
            cursor: pointer;
        }

    .header__logo {
        display: flex;
        align-items: center;
        margin-right: auto;
        cursor: pointer;
    }

        .header__logo img {
            width: 42px;
            height: 42px;
        }

    .contact__bg {
        background-image: url(https://thumbs.dreamstime.com/z/homework-word-writkboard-text-books-school-books-38372083.jpg?w=992);
        background-repeat: no-repeat;
        background-size: cover;
        background-position: top;
        /* filter: brightness(40%); */
        height: 300px;
    }

        .contact__bg h1 {
            text-align: center;
            font-size: 62px;
            padding-top: 100px;
            color: black;
        }

    .footer {
        background: #111;
        color: #949393 !important;
    }

    .footer__container {
        display: flex;
        gap: 250px;
        padding-top: 70px;
        padding-bottom: 54px;
    }

    .footer__item {
        display: flex;
        flex-direction: column;
        gap: 18px;
    }

    .footer__logo {
        display: flex;
        align-items: center;
        gap: 10px;
    }

    .footer__item img {
        width: 42px;
        height: 42px;
        border-radius: 50%;
    }

    .footer h6 {
        color: #fff;
    }

    .footer h1 {
        color: #fff;
    }

    h1 {
        margin: 0;
    }

    p {
        margin: 0;
    }

    .footer__p {
        text-align: center;
        color: #545454;
        font-size: 12px;
        padding-bottom: 24px;
    }

    .social__logo {
        display: flex;
        gap: 20px;
        padding-top: 30px;
    }

    .footer__item a {
        cursor: pointer;
        color: #949393;
    }

    .social__logo {
        cursor: pointer;
    }

    .content {
        margin-top: 80px;
        margin-bottom: 100px;
    }

    .content-title {
        width: 330px;
        box-shadow: 0px 0px 40px 0px rgba(0, 0, 0, 0.06);
    }

        .content-title h6 {
            padding: 20px 30px;
            border-bottom: 1px solid gray;
            font-size: 24px;
            font-weight: 400;
        }

    .content h1 {
        padding: 34px 30px;
        box-shadow: 0px 0px 40px 0px rgba(0, 0, 0, 0.06);
        width: 330px;
        border-bottom: 1px solid gray;
        font-size: 32px;
    }

    .content__container {
        display: flex;
        gap: 30px;
    }

    .values {
        max-width:850px;
        padding: 40px 60px;
        background: #35A4D9;
        box-shadow: 0px 5px 40px 0px rgba(53, 164, 217, 0.14);
        color: #fff;
        cursor:pointer;
        overflow-wrap: break-word;
    }

        .values h2 {
            font-size: 24px;
            margin-bottom: 20px;
        }

        .values p {
            font-size: 18px;
            line-height: 28px;
            font-weight: 400;
        }

    .date {
        margin-top: 95px;
        display: flex;
        justify-content: space-between;
    }

    .active {
        color: #113BA1 !important;
    }

</style>


<header>
    <div class="container-s">
        <div class="header__container">
            <div class="header__logo">
                <img src="https://devel.prom.uz/upload/organization_logos/ee/6e/ee6e2d1fa54c427cb384776ce3891061.png" alt="">
                <h1>URANUS</h1>
            </div>
            <UserHeader />
        </div>
    </div>
</header>
<section class="contact__bg">
    <h1>Домашние задания</h1>
</section>
<section class="content">
    <div class="container-s content__container">
        <div class="over">
            <h1>Содержание</h1>
            <div class="content-title">
                <h6>1.@task.Title</h6>
            </div>
        </div>
        <div>
            <div class="values" @onclick="ToAnswer">
                <h2>@task.Title</h2>
                <p>@task.Description</p>
                <div class="date">
                    <p>Срок выполнения: @task.DateTime</p>
                    <p>@task.Process</p>
                </div>
            </div>
        </div>
    </div>
</section>
<Footer />
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.1/dist/js/bootstrap.bundle.min.js" integrity="sha384-HwwvtgBNo3bZJJLYd8oVXjrBZt8cqVSpeBNS5n7C8IVInixGAoxmnlMuBnhbgrkm" crossorigin="anonymous"></script>
<script>
    function clearLocalStorage() {
        localStorage.clear();
    }
</script>

@code {
    private string UserEmail { get; set; } = string.Empty;
    private string TaskId { get; set; } = string.Empty;
    private Blazor.Shared.Task task = new Blazor.Shared.Task();


    protected override async System.Threading.Tasks.Task OnInitializedAsync()
    {
        var email= await LocalStorageService.GetEmailFromLocalStorage();
        UserEmail = email;
        await GetTaskIdFromLocalStorage();
        if (string.IsNullOrEmpty(UserEmail))
        {
            NavigationManager.NavigateTo("/login");
        }
        else
        {
            var result = await ApiServices.GetTask(TaskId);
            if (result is not null)
            {
                task = result;
            }   
        }
    }

    private async System.Threading.Tasks.Task GetTaskIdFromLocalStorage()
    {
        var taskId = await JsRuntime.InvokeAsync<string>("localStorage.getItem", "taskId");

        if (!string.IsNullOrEmpty(taskId))
        {
            TaskId = taskId;
        }
    }

    void ToAnswer()
    {
        NavigationManager.NavigateTo(NavigationUrls.ToAnswer);
    }
}
